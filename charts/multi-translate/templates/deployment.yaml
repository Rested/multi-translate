{{- $fullName := include "multi-translate.fullname" . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $fullName }}
  labels:
    {{- include "multi-translate.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "multi-translate.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "multi-translate.selectorLabels" . | nindent 8 }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "multi-translate.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image }}"
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          env:
            {{- if .Values.config.microsoft.usingVirtualNetwork }}
            - name: MICROSOFT_TRANSLATOR_USING_VIRTUAL_NETWORK
              value: "{{ .Values.config.microsoft.usingVirtualNetwork }}"
            {{- end }}
            {{- if .Values.config.microsoft.region }}
            - name: MICROSOFT_TRANSLATOR_REGION
              value: "{{ .Values.config.microsoft.region }}"
            {{- end }}
            {{- if .Values.config.microsoft.endpoint }}
            - name: MICROSOFT_TRANSLATOR_ENDPOINT
              value: "{{ .Values.config.microsoft.endpoint }}"
            {{- end }}
            {{- if .Values.config.microsoft.subscriptionKeySecret.name }}
            - name: MICROSOFT_TRANSLATOR_SUBSCRIPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.config.microsoft.subscriptionKeySecret.name }}"
                  key: "{{ .Values.config.microsoft.subscriptionKeySecret.key }}"
            {{- end }}
            {{- if .Values.config.google.parentPath }}
            - name: GOOGLE_PARENT_PATH
              value: "{{ .Values.config.google.parentPath }}"
            {{- end }}
            {{- if .Values.config.google.endpoint }}
            - name: GOOGLE_ENDPOINT
              value: "{{ .Values.config.google.endpoint }}"
            {{- end }}
            {{- if .Values.config.google.serviceAccountSecret.name }}
            - name: GOOGLE_SVC_ACCOUNT_JSON_PATH
              value: "/etc/google-svc-acc/google-svc-acc.json"
            {{- end }}
            {{- if .Values.config.amazon.region }}
            - name: AMAZON_REGION
              value: "{{ .Values.config.amazon.region }}"
            {{- end }}
            {{- if .Values.config.amazon.awsAccessKeyIdSecret.name }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.config.amazon.awsAccessKeyIdSecret.name }}"
                  key: "{{ .Values.config.amazon.awsAccessKeyIdSecret.key }}"
            {{- end }}
            {{- if .Values.config.amazon.awsSecretAccessKeySecret.name }}
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.config.amazon.awsSecretAccessKeySecret.name }}"
                  key: "{{ .Values.config.amazon.awsSecretAccessKeySecret.key }}"
            {{- end }}
            {{- if .Values.config.papago.naverCloud }}
            - name: PAPAGO_NAVER_CLOUD
              value: "{{ .Values.config.papagoNaverCloud }}"
            {{- end }}
            {{- if .Values.config.papago.endpoint }}
            - name: PAPAGO_ENDPOINT
              value: "{{ .Values.config.papago.endpoint }}"
            {{- end }}
            {{- if .Values.config.papago.clientIdSecret.name }}
            - name: PAPAGO_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.config.papago.clientIdSecret.name }}"
                  key: "{{ .Values.config.papago.clientIdSecret.key }}"
            {{- end }}
            {{- if .Values.config.papago.clientSecretSecret.name }}
            - name: PAPAGO_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.config.papago.clientSecretSecret.name }}"
                  key: "{{ .Values.config.papago.clientSecretSecret.key }}"
            {{- end }}
            {{- if .Values.config.deepL.endpoint }}
            - name: DEEP_L_ENDPOINT
              value: "{{ .Values.config.deepL.endpoint }}"
            {{- end }}
            {{- if .Values.config.deepL.authKeySecret.name }}
            - name: DEEP_L_AUTH_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.config.deepL.authKeySecret.name }}"
                  key: "{{ .Values.config.deepL.authKeySecret.key }}"
            {{- end }}
            {{- if .Values.config.yandex.endpoint }}
            - name: YANDEX_ENDPOINT
              value: "{{ .Values.config.yandex.endpoint }}"
            {{- end }}
            {{- if .Values.config.yandex.folderId }}
            - name: YANDEX_FOLDER_ID
              value: "{{ .Values.config.yandex.folderId }}"
            {{- end }}
            {{- if .Values.config.yandex.IAMTokenSecret.name }}
            - name: YANDEX_IAM_TOKEN
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.config.yandex.IAMTokenSecret.name }}"
                  key: "{{ .Values.config.yandex.IAMTokenSecret.key }}"
            {{- end }}
            {{- if .Values.config.logLevel }}
            - name: LOG_LEVEL
              value: "{{ .Values.config.logLevel }}"
            {{- end }}
            {{- if .Values.postgresql.enabled }}
            - name: DATABASE_HOST
              value: "{{ include "postgresql.fullname" . }}-postgresql-headless"
            - name: DATABASE_PORT
              value: "5432"
            - name: DATABASE_USER
              value: "{{ .Values.postgresql.postgresqlUsername }}"
            - name: DATABASE_DB
              value: "{{ .Values.postgresql.postgresqlDatabase }}"
            {{- if .Values.postgresql.existingSecret }}
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.postgresql.existingSecret }}"
                  key: "{{ .Values.postgresql.existingSecretKey }}"
            {{- else }}
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $fullName }}-postgresql
                  key: postgresql-password
            {{- end }}
            {{- else }}
            - name: ENABLE_PERSISTENCE
              value: "false"
            {{- end }}
            - name: POSTGRES_DSN
              value: postgresql://$(DATABASE_USER):$(DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_DB)
            - name: ENABLE_GQL
              value: "{{ .Values.config.gqlEnabled }}"
            {{- if .Values.config.rateLimits }}
            - name: RATE_LIMITS
              value: "{{ .Values.config.rateLimits }}"
            {{- end }}
            {{- if .Values.redis.enabled }}
            {{- if .Values.redis.existingSecret }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.redis.existingSecret }}
                  key: {{ .Values.redis.existingSecretKey }}
            {{- else }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ $fullName }}-redis"
                  key: redis-password
            {{- end }}
            - name: REDIS_DSN
              value: "redis://:$(REDIS_PASSWORD)@{{ $fullName }}-redis-master:6379/1"
            {{- end }}
            {{- if .Values.config.maxSourceTextLength }}
            - name: MAX_SOURCE_TEXT_LENGTH
              value: "{{ .Values.config.maxSourceTextLength }}"
            {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            {{- if .Values.config.google.serviceAccountSecret.name }}
            - name: google-svc-acc
              mountPath: "/etc/google-svc-acc"
              readOnly: true
            {{- end }}
            {{- if .Values.config.languagePreferences }}
            - name: language-preferences
              mountPath: "/code/language_preferences.yaml"
              subPath: language_preferences.yaml
              readOnly: true
            {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      dnsConfig:
        nameservers:
          - 1.1.1.1
          - 8.8.8.8
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      volumes:
    {{- if .Values.config.google.serviceAccountSecret.name }}
        - name: google-svc-acc
          secret:
            secretName: "{{ .Values.config.google.serviceAccountSecret.name }}"
            items:
              - key: "{{ .Values.config.google.serviceAccountSecret.key }}"
                path: google-svc-acc.json
    {{- end }}
    {{- if .Values.config.languagePreferences }}
        - name: language-preferences
          configMap:
            name: {{ $fullName }}-language-preferences
            items:
              - key: language_preferences
                path: language_preferences.yaml
    {{- end }}