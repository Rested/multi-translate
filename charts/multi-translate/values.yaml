# Default values for multi-translate.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# replicaCount -- The number of replicas of the application to create
replicaCount: 1

# image -- The application docker image
image: rekonuk/multi-translate:v0.2.0
# imagePullPolicy -- The pull policy for the application docker image
imagePullPolicy: IfNotPresent
# imagePullSecrets -- Any pull secrets required to pull the application, initContainers, or sidecars
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# config -- Multi-Translate configuration
# @default -- see below
config:
  # config.logLevel -- Which python log level to use DEBUG being the most verbose. INFO is recommended
  logLevel:
  # config.microsoft -- Configuration related to the microsoft translator engine
  # @default -- see below
  microsoft:
    # config.microsoft.endpoint -- The HTTP endpoint for requests to the microsoft translator service
    endpoint:
    # config.microsoft.usingVirtualNetwork -- See docs for relevance (values are true or false) https://docs.microsoft.com/en-us/azure/cognitive-services/translator/reference/v3-0-reference#virtual-network-support:
    usingVirtualNetwork: false
    # config.microsoft.region -- Which region the microsoft translator service is in
    region: global
    subscriptionKeySecret:
      # config.microsoft.subscriptionKeySecret.name -- The name of the k8s secret containing the microsoft subscription key
      name:
      # config.microsoft.subscriptionKeySecret.key -- The secret key containing your microsoft subscription key
      key:
  # config.google -- Configuration related to google translate
  # @default -- see below
  google:
    # config.google.endpoint --
    endpoint: "https://translation.googleapis.com"
    # config.google.parentPath -- See https://cloud.google.com/translate/docs/migrate-to-v3#resources_projects_and_locations for details
    parentPath:
    serviceAccountSecret:
      # config.google.serviceAccountSecret.name -- The name of the k8s secret containing the service account json
      name:
      # config.google.serviceAccountSecret.key -- The key of the k8s secret containing the service account json
      key:
  # config.amazon -- Configuration related to amazon translate
  # @default -- see below
  amazon:
    # config.amazon.region -- The aws region your amazon translate service belongs to
    region:
    awsAccessKeyIdSecret:
      # config.amazon.awsAccessKeyIdSecret.name -- The name of the k8s secret containing the aws access key id
      name:
      # config.amazon.awsAccessKeyIdSecret.key -- The key of the k8s secret containing the aws access key id
      key:
    awsSecretAccessKeySecret:
      # config.amazon.awsSecretAccessKeySecret.name -- The name of the k8s secret containing the aws secret access key
      name:
      # config.amazon.awsSecretAccessKeySecret.key -- The name of the k8s secret containing the aws secret access key
      key:
  # config.papago -- Configuration related to Naver's Papago translate
  # @default -- see below
  papago:
    # config.papago.naverCloud -- boolean indicating whether the service is from Naver Cloud (true) or Naver Developers (false)
    naverCloud: false
    # config.papago.endpoint -- The papago HTTP endpoint
    endpoint: "https://openapi.naver.com/v1/papago/n2mt"
    clientIdSecret:
      # config.papago.clientIdSecret.name --  The name of the k8s secret containing the papago client id
      name:
      # config.papago.clientIdSecret.key --  The key of the k8s secret containing the papago client id
      key:
    clientSecretSecret:
      # config.papago.clientSecretSecret.name --  The name of the k8s secret containing the papago client secret
      name:
      # config.papago.clientSecretSecret.key --  The key of the k8s secret containing the papago client secret
      key:
  # config.deepL -- Configuration related to the Deep L Translation service
  # @default -- see below
  deepL:
    # config.deepL.endpoint -- The deepL HTTP endpoint
    endpoint: "https://api.deepl.com/v2/"
    authKeySecret:
      # config.deepL.authKeySecret.name -- The name of the k8s secret containing the deepL auth key
      name:
      # config.deepL.authKeySecret.key -- The key of the k8s secret containing the deepL auth key
      key:
  # config.yandex -- Configuration related to the Yandex Translation service
  # @default -- see below
  yandex:
    # config.yandex.endpoint -- The Yandex translation HTTP endpoint
    endpoint: "https://translate.api.cloud.yandex.net/translate/v2/"
    # config.yandex.folderId -- The Yandex Cloud folder ID if a UserAccount is used for authentication
    folderId:
    IAMTokenSecret:
      # config.deepL.IAMTokenSecret.name -- The name of the k8s secret containing the Yandex IAM token
      name:
      # config.deepL.IAMTokenSecret.key -- The key of the k8s secret containing the Yandex IAM token
      key:

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

postgresql:
  enabled: true
  ## the postgres database to use
  ##
  postgresqlDatabase: translate

  ## the postgres user to create
  ##
  postgresqlUsername: postgres

  ## the postgres user's password
  ##
  ## WARNING:
  ## - you should NOT use this, instead specify `postgresql.existingSecret`
  ##
  postgresqlPassword: SuperSecretChangeMe

  ## the name of a pre-created secret containing the postgres password
  ##
  existingSecret: ""

  ## the key in `postgresql.existingSecret` containing the password string
  ##
  existingSecretKey: "postgresql-password"

  ## configs for the PVC of postgresql
  ##
  persistence:
    ## if postgres will use Persistent Volume Claims to store data
    ##
    ## WARNING:
    ## - if false, data will be LOST as postgres Pods restart
    ##
    enabled: true

    ## the name of the StorageClass used by the PVC
    ##
    storageClass: ""

    ## the access modes of the PVC
    ##
    accessModes:
      - ReadWriteOnce

    ## the size of PVC to request
    ##
    size: 8Gi
