/**
 * multi-translate
 * Multi-Translate is a unified interface on top of various translate APIs providing optimal translations, persistence, fallback.
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import TranslationRequest from '../model/TranslationRequest';
import TranslationResponse from '../model/TranslationResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 0.2.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the readyGet operation.
     * @callback module:api/DefaultApi~readyGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ready
     * @param {module:api/DefaultApi~readyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    readyGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the translatePostTranslatePost operation.
     * @callback module:api/DefaultApi~translatePostTranslatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TranslationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate Post
     * @param {module:model/TranslationRequest} translationRequest 
     * @param {module:api/DefaultApi~translatePostTranslatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TranslationResponse}
     */
    translatePostTranslatePost(translationRequest, callback) {
      let postBody = translationRequest;
      // verify the required parameter 'translationRequest' is set
      if (translationRequest === undefined || translationRequest === null) {
        throw new Error("Missing the required parameter 'translationRequest' when calling translatePostTranslatePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TranslationResponse;
      return this.apiClient.callApi(
        '/translate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the translateTranslateGet operation.
     * @callback module:api/DefaultApi~translateTranslateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TranslationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate
     * @param {String} sourceText The text to be translated
     * @param {String} toLanguage The ISO-639-1 code of the language to translate the text to
     * @param {Object} opts Optional parameters
     * @param {String} opts.fromLanguage The ISO-639-1 code of the language to translate the text from - if notspecified then detection will be attempted
     * @param {String} opts.preferredEngine Which translation engine to use. Choices are microsoft, google, amazon, papago, deepl, yandex and best (default to 'best')
     * @param {Boolean} opts.withAlignment Whether to return word alignment information or not (default to false)
     * @param {Boolean} opts.fallback Whether to fallback to the best available engine if the preferred engine does not succeed (default to false)
     * @param {module:api/DefaultApi~translateTranslateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TranslationResponse}
     */
    translateTranslateGet(sourceText, toLanguage, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sourceText' is set
      if (sourceText === undefined || sourceText === null) {
        throw new Error("Missing the required parameter 'sourceText' when calling translateTranslateGet");
      }
      // verify the required parameter 'toLanguage' is set
      if (toLanguage === undefined || toLanguage === null) {
        throw new Error("Missing the required parameter 'toLanguage' when calling translateTranslateGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'source_text': sourceText,
        'to_language': toLanguage,
        'from_language': opts['fromLanguage'],
        'preferred_engine': opts['preferredEngine'],
        'with_alignment': opts['withAlignment'],
        'fallback': opts['fallback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TranslationResponse;
      return this.apiClient.callApi(
        '/translate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
